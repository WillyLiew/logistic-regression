import numpy as np
import matplotlib.pyplot as plt
import h5py     # common package to interact with a dataset that is stored on an H5 file.
#NIL: import scipy            # test your model with your own picture at the end.
from PIL import Image
from scipy import ndimage
from lr_utils import load_dataset
import pickle

### read in train and test data
'''
# train_set_x_orig.shape = (209, 64, 64, 3)
train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()


# Example of a picture
# np.squeeze => [1] -> 1

index = 24
plt.imshow(train_set_x_orig[index])
plt.show()
print ("y = " + str(train_set_y[:, index]) + ", it's a '" + classes[np.squeeze(train_set_y[:, index])].decode("utf-8") +  "' picture.")


m_train = train_set_x_orig.shape[0]
m_test = test_set_x_orig.shape[0]
num_px = train_set_x_orig.shape[1]

# x.shape = (a,b,c,d);  x.reshape(a,-1) -> (b*c*d,a)
# train_set_x_flatten.shape = (12288, 209)
train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T 
test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T 

# preprocessing that divides by the maximum value = 255
train_set_x = train_set_x_flatten/255
test_set_x = test_set_x_flatten/255
'''

# calculate sigmoid given z (can be an array)
def sigmoid(z):   
    s = 1/(1+np.exp(-z))       
    return s

# initialize the values for w and b (normally 0)
def initialize_with_zeros(dim):       
    w = np.zeros((dim,1))
    b = 0
    
    # if condition returns True, nothing happens
    # if condition returns False, AssertionError is raised:    
    assert(w.shape == (dim, 1))
    assert(isinstance(b, float) or isinstance(b, int))
    return w, b

# Compute cost function-cost and gradient descent-grad
def propagate(w, b, X, Y):      
    m = X.shape[1]
    
    A = sigmoid(np.dot(w.T,X)+b)            # compute activation - y hat
    cost = -1/m * np.sum(Y*np.log(A)+(1-Y)*np.log(1-A))     # compute cost function
    
    dw = 1/m * np.dot(X,(A-Y).T)
    db = 1/m* np.sum(A-Y)

    assert(dw.shape == w.shape)
    assert(db.dtype == float)
    cost = np.squeeze(cost)
    assert(cost.shape == ())
    
    # dictionary
    grads = {"dw": dw,
             "db": db}
    
    return grads, cost

# optimize w and b values by repeating propagate() for num_iterations times
# if you want to print_cost, set it to True when you call it
def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):
    
    costs = []
    
    for i in range(num_iterations):
        grads, cost = propagate(w, b, X, Y)
        
        
        # Retrieve derivatives from grads (dictionary)
        dw = grads["dw"]
        db = grads["db"]
        
        # update rule, learning_rate is the alpha in formula
        
        w = w - learning_rate * dw
        b = b - learning_rate * db
        
        
        # Record the costs
        if i % 100 == 0:
            costs.append(cost)
        
        # Print the cost every 100 training iterations
        if print_cost and i % 100 == 0:
            print ("Cost after iteration %i: %f" %(i, cost))
    
    params = {"w": w,
              "b": b}
    
    grads = {"dw": dw,
             "db": db}
    
    return params, grads, costs

# Predict whether the label is 0 or 1 using learned logistic regression parameters
def predict(w, b, X):
   
    m = X.shape[1]                  # number of prediction samples
    Y_prediction = np.zeros((1,m))
    w = w.reshape(X.shape[0], 1)
    
    A = sigmoid(np.dot(w.T,X)+b)    # 0 < value of A < 1

    for i in range(A.shape[1]):
        
        if(A[0,i] <= 0.5):
            Y_prediction[0,i] = 0
        else:
            Y_prediction[0,i] = 1
        
    
    assert(Y_prediction.shape == (1, m))
    
    return Y_prediction


# Merge all functions together 
def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):
    
    # initialize parameters with zeros 
    w, b = initialize_with_zeros(X_train.shape[0])   

    # Gradient descent 
    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)
    
    # Retrieve parameters w and b from dictionary "parameters"
    w = parameters["w"]
    b = parameters["b"]
    
    # Predict test/train set examples 
    # Y_prediction_train is just for the sake of knowing how good the model fits the data
    
    Y_prediction_test = predict(w, b, X_test)
    Y_prediction_train = predict(w, b, X_train)


    # Print train/test Errors
    print("train accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))
    print("test accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))

    d = {"costs": costs,
         "Y_prediction_test": Y_prediction_test, 
         "Y_prediction_train" : Y_prediction_train, 
         "w" : w, 
         "b" : b,
         "learning_rate" : learning_rate,
         "num_iterations": num_iterations}
    
    return d


# Finally !!!
# when iteration increases, cost should be decreasing as value of w and b are getting closer to the global optimum 
'''
d = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)
with open("logReg.pickle","wb") as f:
    pickle.dump(d,f)
'''
# Plot learning curve (with costs)
'''
costs = np.squeeze(d['costs'])
plt.plot(costs)
plt.ylabel('cost')
plt.xlabel('iterations (per hundreds)')
plt.title("Learning rate =" + str(d["learning_rate"]))
plt.show()
'''

# Learning rate Î± determines how rapidly we update the parameters. 
# If it is too large we may "overshoot" the optimal value. 
# If it is too small we will need too many iterations to converge to the best values. 
'''
learning_rates = [0.01, 0.001, 0.0001]
models = {}
for i in learning_rates:
    print ("learning rate is: " + str(i))
    models[str(i)] = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 1500, learning_rate = i, print_cost = False)
    print ('\n' + "-------------------------------------------------------" + '\n')

for i in learning_rates:
    plt.plot(np.squeeze(models[str(i)]["costs"]), label= str(models[str(i)]["learning_rate"]))

plt.ylabel('cost')
plt.xlabel('iterations (hundreds)')

legend = plt.legend(loc='upper center', shadow=True)
frame = legend.get_frame()
frame.set_facecolor('0.90')
plt.show()
'''

# try with own image (further research) 
temp = open("logReg.pickle","rb")
d = pickle.load(temp)

my_image = "my_image.jpg"   # change this to the name of your image file 


# We preprocess the image to fit your algorithm.
fname = my_image
#image = np.array(ndimage.imread(fname, flatten=False))
#image = image/255.
#my_image = scipy.misc.imresize(image, size=(num_px,num_px)).reshape((1, num_px*num_px*3)).T
#my_predicted_image = predict(d["w"], d["b"], my_image)

image = Image.open(fname)
num_px = 64
resized_image = image.resize((num_px, num_px))
resized_image_data = np.array(resized_image, dtype = 'float32')
resized_image_data/= 255.
image_data = np.expand_dims(resized_image_data, 0)  # -> (1, 64, 64, 3)
image_data = image_data.reshape(image_data.shape[0], -1).T #-> (12288, 1)

#resized_image.show()
#plt.imshow(resized_image_data)
#plt.show()

my_predicted_image = predict(d["w"], d["b"], image_data)
#print("y = " + str(np.squeeze(my_predicted_image)) + ", your algorithm predicts a \"" + classes[int(np.squeeze(my_predicted_image)),].decode("utf-8") +  "\" picture.")
new_class = ['not cat', 'cat']
print("y = " + str(np.squeeze(my_predicted_image)) + ", your algorithm predicts a \"" + new_class[int(np.squeeze(my_predicted_image))] +  "\" picture.")


